const cloud=require('wx-server-sdk'); cloud.init({ env:cloud.DYNAMIC_CURRENT_ENV }); const db=cloud.database(); const orders=db.collection('orders'); const courses=db.collection('courses'); function genOutTradeNo(){ const ts=Date.now(); const rnd=Math.floor(Math.random()*1e6).toString().padStart(6,'0'); return 'COU'+ts+rnd } exports.main=async(event)=>{ const {OPENID}=cloud.getWXContext(); const action=event&&event.action; if(action==='create'){ const courseId=event&&event.courseId; const cr=await courses.doc(courseId).get().catch(()=>({})); if(!cr||!cr.data) return { ok:false, msg:'课程不存在' }; const order={ outTradeNo:genOutTradeNo(), openid:OPENID, courseId, title:cr.data.title, amount:cr.data.price, status:'PENDING', createdAt:new Date(), updatedAt:new Date() }; await orders.add({ data:order }); return { ok:true, order } } if(action==='markPaid'){ const outTradeNo=event&&event.outTradeNo; const r=await orders.where({ outTradeNo, openid:OPENID }).get(); if(!r.data.length) return { ok:false }; await orders.doc(r.data[0]._id).update({ data:{ status:'PAID', transactionId:event.transactionId||'MOCK', updatedAt:new Date() } }); return { ok:true } } if(action==='query'){ const outTradeNo=event&&event.outTradeNo; const r=await orders.where({ outTradeNo, openid:OPENID }).get(); if(!r.data.length) return { ok:false }; return { ok:true, order:r.data[0] } } if(action==='myCourses'){ const r=await orders.where({ openid:OPENID, status:'PAID' }).orderBy('updatedAt','desc').get(); return { list:r.data.map(x=>({ courseId:x.courseId, title:x.title })) } } return { ok:false, msg:'unknown action' } }
