const cloud=require('wx-server-sdk'); const https=require('https'); const crypto=require('crypto'); cloud.init({ env:cloud.DYNAMIC_CURRENT_ENV }); const db=cloud.database(); const orders=db.collection('orders'); const { APPID, MCH_ID, MCH_SERIAL_NO, MCH_PRIVATE_KEY, MOCK_PAY, NOTIFY_URL }=process.env; function signMessage(message, key){ const sign=crypto.createSign('RSA-SHA256'); sign.update(message); sign.end(); return sign.sign(key,'base64') } function buildAuthorization(method, path, body){ const ts=Math.floor(Date.now()/1000).toString(); const nonce=crypto.randomBytes(16).toString('hex'); const msg=method+'\n'+path+'\n'+ts+'\n'+nonce+'\n'+body+'\n'; const sig=signMessage(msg, MCH_PRIVATE_KEY); const token='mchid="'+MCH_ID+'",serial_no="'+MCH_SERIAL_NO+'",nonce_str="'+nonce+'",timestamp="'+ts+'",signature="'+sig+'"'; return { authorization:'WECHATPAY2-SHA256-RSA2048 '+token, nonceStr:nonce, timestamp:ts } } exports.main=async(event)=>{ const { OPENID }=cloud.getWXContext(); const outTradeNo=event&&event.outTradeNo; if(!outTradeNo) return { err:'missing outTradeNo' }; const r=await orders.where({ outTradeNo, openid:OPENID }).get(); if(!r.data.length) return { err:'order not found' }; const order=r.data[0]; if(order.status==='PAID') return { mockPaid:true }; if(MOCK_PAY==='true'||!APPID||!MCH_ID||!MCH_SERIAL_NO||!MCH_PRIVATE_KEY){ await orders.doc(order._id).update({ data:{ status:'PAID', updatedAt:new Date(), transactionId:'MOCK' } }); return { mockPaid:true } } const bodyObj={ appid:APPID, mchid:MCH_ID, description:order.title||'课程购买', out_trade_no:outTradeNo, notify_url:NOTIFY_URL||'https://example.com/pay/notify', amount:{ total:order.amount, currency:'CNY' }, payer:{ openid:OPENID } }; const body=JSON.stringify(bodyObj); const path='/v3/pay/transactions/jsapi'; const { authorization }=buildAuthorization('POST', path, body); const options={ hostname:'api.mch.weixin.qq.com', path, method:'POST', headers:{ 'Authorization':authorization, 'Content-Type':'application/json', 'Accept':'application/json' } }; const prepay=await new Promise((resolve,reject)=>{ const req=https.request(options,res=>{ let data=''; res.on('data',d=>data+=d); res.on('end',()=>{ try{ resolve(JSON.parse(data)) }catch(e){ reject(e) } }) }); req.on('error',reject); req.write(body); req.end() }); if(!prepay||!prepay.prepay_id) return { err:'prepay failed', detail:prepay }; const pkg='prepay_id='+prepay.prepay_id; const ts=Math.floor(Date.now()/1000).toString(); const nonce=crypto.randomBytes(16).toString('hex'); const signStr=APPID+'\n'+ts+'\n'+nonce+'\n'+pkg+'\n'; const paySign=signMessage(signStr, MCH_PRIVATE_KEY); return { timeStamp:ts, nonceStr:nonce, package:pkg, paySign } }
